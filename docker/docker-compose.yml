services:
  backend:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ../storage:/app/storage
      - ../logs:/app/logs
    env_file:
      - ../.env
    container_name: backend
    networks:
      - monitoring-network
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DATABASE_URL=sqlite:///./sketchdojo.db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STABILITY_API_KEY=${STABILITY_API_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
      - SKETCHDOJO_SETTINGS_MODULE=docker.docker-settings
      # JWT authentication settings
      - SECRET_KEY=${SECRET_KEY:-development_secret_key}
      - JWT_SECRET=${JWT_SECRET:-development_jwt_secret}
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRATION=1440  # 24 hours in minutes
      # CORS settings
      - CORS_ORIGINS=["*"]  # Allow all origins in development
    depends_on:
      - redis
    restart: unless-stopped
    
  celery-worker:
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
    command: celery -A app.tasks.celery_app worker --loglevel=debug
    volumes:
      - ../storage:/app/storage
      - ../logs:/app/logs
    env_file:
      - ../.env
    container_name: celery-worker
    networks:
      - monitoring-network
    environment:
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DATABASE_URL=sqlite:///./sketchdojo.db
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STABILITY_API_KEY=${STABILITY_API_KEY}
      - ENVIRONMENT=development
      - DEBUG=true
      - SKETCHDOJO_SETTINGS_MODULE=docker.docker-settings
      - SECRET_KEY=${SECRET_KEY:-development_secret_key}
      - JWT_SECRET=${JWT_SECRET:-development_jwt_secret}
    depends_on:
      - redis
      - backend
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - monitoring-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts:/etc/prometheus/alerts
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    restart: unless-stopped

  # Redis exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
    ports:
      - "9121:9121"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - monitoring-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
    restart: unless-stopped
    networks:
      - monitoring-network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  monitoring-network:
    driver: bridge
